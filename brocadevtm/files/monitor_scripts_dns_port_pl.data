#!/bin/sh
# Bootstrap into the version of perl provided by Zeus
exec $ZEUSHOME/perl/miniperl -wx $0 ${1+"$@"}
 if 0;

# -*- perl -*-
#!/usr/bin/perl
#line 9

# This monitor will check that the machine is a dns server, and
# that it responds with the correct ip address when given
# a hostname to lookup

BEGIN { unshift @INC, "$ENV{ZEUSHOME}/zxtm/lib/perl",
                      "$ENV{ZEUSHOME}/zxtmadmin/lib/perl"; }

use Zeus::ZXTM::Monitor qw( ParseArguments MonitorWorked MonitorFailed Log );


# Process the arguments
my %args = ParseArguments();

if( ! $args{request_host} ) {
   MonitorFailed( "No 'request_host' to lookup specified" );
}

my $cmd = "dig \@$args{ipaddr} -p $args{port} $args{request_host} A";
my $pid = open( PROG, "$cmd  2>&1 |" );

if( !defined $pid ) {
   # No dig, retry with nslookup
   $cmd = "nslookup -port=$args{port} $args{request_host} $args{ipaddr}";
   close( PROG );
   my $pid = open( PROG, "$cmd 2>&1 |" );
   if( !defined $pid ) {
      MonitorFailed( "No 'dig' or 'nslookup' to do DNS lookups" );
   }
   Log( "No DiG: Retrying with $cmd" );
}

my $response = '';
while (<PROG>) {
   $response .= $_;
}

if( ! close PROG ) {
   MonitorFailed( "DNS Lookup failed $response" ) if $?;
   MonitorFailed( "$!" )      if $!;
   MonitorFailed( "Unknown error" );
}

Log( "Output: $response" );

if( $args{response_addr} ) {
   if( $response !~ /\Q$args{response_addr}\E/ ) {
      MonitorFailed( "DNS Lookup failed" );
   }
} else {
   MonitorFailed( "Not supplied a response address" );
}

MonitorWorked();
