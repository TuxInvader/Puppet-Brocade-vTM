#!/usr/bin/ruby

require 'io/console'
require 'optparse'
require 'ostruct'
require 'fileutils'

require_relative '../lib/brocade/vtmcontroller'
require_relative '../lib/brocade/puppetmanifest'

class GetOptions

	def self.parse(args)

		options = OpenStruct.new
		options.debug = 0
		options.host = "127.0.0.1"
		options.port = 9070
		options.allParams = true
		options.builtin = true
		options.outfile = nil
		options.binDir = nil
		options.carryOn = false
		options.homedir = File.expand_path( "#{File.dirname(__FILE__)}/.." )
		options.manifestDir = "#{options.homedir}/manifests/"

		opt_parser = OptionParser.new do |opts|

			opts.banner = "Usage: genNodeConfig [options]"

			opts.separator ""
			opts.separator "Specific options:"

			opts.on("-h", "--host <vTM Host>", "The hostname or ip address of the vTM to probe") do |host|
				options.host = host
      	end

			opts.on("-p", "--port <vTM Port>", "The REST API port of the vTM to probe") do |port|
				options.port = port
      	end

			opts.on("-v", "--version <REST Version>", "The REST Version") do |version|
				options.version = version
      	end

			opts.on("-U", "--user <username>", "The REST API User") do |user|
				options.user = user
      	end

			opts.on("-P", "--pass <password>", "The REST API Password") do |pass|
				options.pass = pass
      	end

			opts.on("-o", "--outfile <filename>", "The output file to write") do |out|
				options.outfile = out
      	end

			opts.on("-b", "--bindir <filename>", "The directory in which to store any binary content (eg rules)") do |bd|
				options.binDir = bd
      	end

			opts.on("-m", "--mandir <manifest dir>", "The location of the manifests") do |out|
				options.outfile = out
      	end

			opts.on("-d", "--debug <level>", "The Debug level, 0 (lowest) to 5 (highest)") do |debug|
				options.debug = Integer(debug)
      	end

			opts.on("-s", "Generate a sparse configuration (ignore default params)") do |sparse|
				options.allParams = false
			end

			opts.on("-n", "Generate a sparse configuration (ignore built-in objects)") do |nb|
				options.builtin = false
			end

			opts.on("-c", "Continue on error") do |carryOn|
				options.caryOn = true
			end

			opts.on_tail("-?", "--help", "Show this message") do
				puts opts
				puts "\nMandatory Parameters: --version, --user, --password, --outfile\n\n"
				exit
			end

		end

		opt_parser.parse!(args)
		options

	end
end

options = GetOptions.parse(ARGV)

raise 'You must supply a -v or --version parameter' if options.version.nil?
raise 'You must supply a -U or --user parameter' if options.user.nil?
raise 'You must supply a -P or --pass parameter' if options.pass.nil?
raise 'You must supply a -o or --outfile parameter' if options.outfile.nil?

if File.exist?(options.outfile)
	FileUtils.rm options.outfile
end

initblob =  "class { 'brocadevtm':\n  rest_user   => '#{options.user}',\n"
initblob += "  rest_pass   => '#{options.pass}',\n  rest_ip     => '#{options.host}',\n"
initblob += "  rest_port   => #{options.port},\n}\n\n"

nodefile = File.open(options.outfile, "w")
nodefile.puts(initblob)
nodefile.close()

uri = "https://#{options.host}:#{options.port}/api/tm/#{options.version}/config/active"
vtmrc = BrocadeREST::VTMController.new(options.user, options.pass, uri, BrocadeREST::PuppetManifest, options.debug)

vtmrc.loadPreRequisites("#{options.homedir}/lib/brocade/data/precedence.csv")
vtmrc.setType( WalkTypes::READ )
vtmrc.continueOnError(options.caryOn)
vtmrc.walk( )
vtmrc.dumpNodeConfig(options.outfile, options.allParams, options.builtin, options.manifestDir, options.binDir)

puts ""
puts " Warning: Any SSL Keys in your configuration will not be complete in the generated config."
puts " The Traffic Manager returns a sha256 hash of the private key when queried. So we have stored"
puts " this hash. If you need to be able to push this configuration entirely, you will need to"
puts " manually add the full private key to your manifest!"
puts ""
puts " If you use SNI Mapping or Aptimizer, then you may want to manually add 'Require' statements."
puts ""
puts " -> Please review your manifest and associated files before applying to a vTM <-"
puts ""

