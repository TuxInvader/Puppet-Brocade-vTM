#!/bin/sh
# Bootstrap into the version of perl provided by Zeus
exec $ZEUSHOME/perl/miniperl -wx $0 ${1+"$@"}
 if 0;

# -*- perl -*-
#!/usr/bin/perl
#line 9

# This monitor will check that the machine is a dns server, and
# that it responds with the correct ip address when given
# a hostname to lookup

BEGIN { unshift @INC, "$ENV{ZEUSHOME}/zxtm/lib/perl",
                      "$ENV{ZEUSHOME}/zxtmadmin/lib/perl"; }

use Zeus::ZXTM::Monitor qw( ParseArguments MonitorWorked MonitorFailed Log );
use strict;

# Process the arguments
my %args = ParseArguments();

if( ! $args{request_host} ) {
   MonitorFailed( "No 'request_host' to lookup specified" );
}

my $type = 'A_AAAA';
if( $args{response_addr} ) {
   # if a specific address is required, only ask for that address type
   if( $args{response_addr} =~ /:/ ) {
      $type = 'AAAA';
   } else {
      $type = 'A';
   }
}

my $cmd = "$ENV{ZEUSHOME}/zxtm/bin/dnslookup --all --server $args{ipaddr} " .
          "--port $args{port} --type $type $args{request_host}";
Log( "Running $cmd" );

# Now run the dnslookup program
open( PROG, "$cmd  2>&1 |" );
my $response = '';
while (<PROG>) {
   $response .= $_;
}

if( ! close PROG ) {
   MonitorFailed( "DNS Lookup failed $response" ) if $?;
   MonitorFailed( "$!" )      if $!;
   MonitorFailed( "Unknown error" );
}

Log( "Output: $response" );

if( $args{response_addr} ) {
   if( $response !~ /\-\>(.+)$/ ) {
      MonitorFailed( "DNS Lookup failed" );
   }
   if( $1 !~ /\t\Q$args{response_addr}\E\t/ ) {
      MonitorFailed( "Lookup failed, expected '$args{response_addr}', got '$1'" );
   }
}

MonitorWorked();
